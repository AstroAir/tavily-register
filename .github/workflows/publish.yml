name: Publish Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Build package for publishing
  build:
    name: Build Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Validate version tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Extract version from tag
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        
        # Extract version from pyproject.toml
        PACKAGE_VERSION=$(python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['version'])
        ")
        echo "Package version: $PACKAGE_VERSION"
        
        # Verify versions match
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "❌ Version mismatch: tag=$TAG_VERSION, package=$PACKAGE_VERSION"
          exit 1
        fi
        echo "✅ Version validation passed"

    - name: Build distributions
      run: |
        python -m build

    - name: Verify build
      run: |
        twine check dist/*
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # Publish to TestPyPI
  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'testpypi' || github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: testpypi
      url: https://test.pypi.org/p/tavily-register

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true

    - name: Test installation from TestPyPI
      run: |
        # Wait a bit for package to be available
        sleep 30
        
        # Try to install from TestPyPI
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ tavily-register
        
        # Test basic functionality
        python -c "import tavily_register; print(f'✅ Installed version: {tavily_register.__version__}')"
        
        # Test entry point
        tavily-register --help

  # Publish to PyPI (production)
  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push' || github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'pypi'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: pypi
      url: https://pypi.org/p/tavily-register

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

    - name: Test installation from PyPI
      run: |
        # Wait a bit for package to be available
        sleep 60
        
        # Try to install from PyPI
        pip install tavily-register
        
        # Test basic functionality
        python -c "import tavily_register; print(f'✅ Installed version: {tavily_register.__version__}')"
        
        # Test entry point
        tavily-register --help

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, publish-to-testpypi]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes
        cat > release_notes.md << EOF
        # Tavily Register v$VERSION
        
        ## 📦 Installation
        
        \`\`\`bash
        pip install tavily-register==$VERSION
        \`\`\`
        
        ## 🚀 What's New
        
        This release includes improvements and bug fixes for the Tavily Register automation tool.
        
        ## 📋 Package Information
        
        - **Python Support**: 3.12+
        - **Platforms**: Windows, macOS, Linux
        - **Dependencies**: See requirements in pyproject.toml
        
        ## 🔗 Links
        
        - [PyPI Package](https://pypi.org/project/tavily-register/$VERSION/)
        - [Documentation](https://github.com/yatotm/tavily-register/docs)
        - [Source Code](https://github.com/yatotm/tavily-register)
        
        ## 📁 Assets
        
        The following distribution files are attached to this release:
        EOF
        
        # List distribution files
        for file in dist/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            echo "- \`$filename\` ($size)" >> release_notes.md
          fi
        done

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Tavily Register v${{ steps.release_notes.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: distributions
        asset_content_type: application/zip

  # Notify on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [publish-to-testpypi, publish-to-pypi, create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.publish-to-testpypi.result == 'success' || needs.publish-to-pypi.result == 'success'
      run: |
        echo "## 🎉 Publication Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Target | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| TestPyPI | ${{ needs.publish-to-testpypi.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| PyPI | ${{ needs.publish-to-pypi.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.publish-to-pypi.result }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Package is now available on PyPI:**" >> $GITHUB_STEP_SUMMARY
          echo "\`pip install tavily-register\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify failure
      if: failure()
      run: |
        echo "## ❌ Publication Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
