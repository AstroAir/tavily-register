name: Documentation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Build documentation
        run: |
          mkdocs build --clean --strict
        env:
          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  test-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Test documentation build
        run: |
          mkdocs build --clean --strict

      - name: Test links
        run: |
          # Install link checker
          pip install linkchecker
          
          # Start local server
          mkdocs serve --dev-addr=127.0.0.1:8000 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 10
          
          # Check links
          linkchecker http://127.0.0.1:8000 --check-extern
          
          # Stop server
          kill $SERVER_PID

      - name: Validate markup
        run: |
          # Install HTML validator
          npm install -g html-validate
          
          # Validate HTML files
          find site -name "*.html" -exec html-validate {} \;

  accessibility-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install accessibility tools
        run: |
          npm install -g @axe-core/cli
          npm install -g pa11y-ci

      - name: Download built site
        uses: actions/download-artifact@v3
        with:
          name: github-pages
          path: ./site

      - name: Extract site
        run: |
          tar -xf artifact.tar -C ./site

      - name: Run accessibility tests
        run: |
          # Start local server
          npx http-server site -p 8080 &
          SERVER_PID=$!
          
          # Wait for server
          sleep 5
          
          # Run axe tests
          axe http://localhost:8080 --exit
          
          # Run pa11y tests
          pa11y-ci http://localhost:8080
          
          # Stop server
          kill $SERVER_PID

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Download built site
        uses: actions/download-artifact@v3
        with:
          name: github-pages
          path: ./site

      - name: Extract site
        run: |
          tar -xf artifact.tar -C ./site

      - name: Run Lighthouse CI
        run: |
          # Start local server
          npx http-server site -p 8080 &
          SERVER_PID=$!
          
          # Wait for server
          sleep 5
          
          # Run Lighthouse
          lhci autorun --upload.target=temporary-public-storage
          
          # Stop server
          kill $SERVER_PID
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy, test-docs]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Documentation deployed successfully!"
          echo "üìñ View at: https://yatotm.github.io/tavily-register"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Documentation deployment failed!"
          echo "Please check the workflow logs for details."
