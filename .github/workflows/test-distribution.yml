name: Test Package Distribution

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Build package for testing
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-distributions
        path: dist/

  # Test package installation in clean environments
  test-installation:
    name: Test Installation on ${{ matrix.os }}
    needs: build-package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
        
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-distributions
        path: dist/

    - name: Install package from wheel
      run: |
        pip install dist/*.whl

    - name: Test entry point
      run: |
        tavily-register --help

    - name: Test package import
      run: |
        python -c "import tavily_register; print('Package imported successfully')"

    - name: Test core functionality
      run: |
        python -c "
        from tavily_register.config.settings import get_config
        from tavily_register.utils.helpers import generate_email
        
        # Test configuration loading
        config = get_config()
        print(f'Config loaded: {type(config).__name__}')
        
        # Test email generation
        email = generate_email('test')
        print(f'Generated email: {email}')
        
        print('Core functionality test passed')
        "

    - name: Uninstall package
      run: |
        pip uninstall tavily-register -y

    - name: Install package from source distribution
      run: |
        pip install dist/*.tar.gz

    - name: Test after source installation
      run: |
        tavily-register --help
        python -c "import tavily_register; print('Source installation test passed')"

  # Test package metadata and structure
  test-metadata:
    name: Test Package Metadata
    needs: build-package
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-distributions
        path: dist/

    - name: Install package inspection tools
      run: |
        pip install pkginfo wheel

    - name: Inspect wheel metadata
      run: |
        python -c "
        import pkginfo
        import glob
        
        wheel_files = glob.glob('dist/*.whl')
        if wheel_files:
            wheel = pkginfo.Wheel(wheel_files[0])
            print(f'Package name: {wheel.name}')
            print(f'Version: {wheel.version}')
            print(f'Summary: {wheel.summary}')
            print(f'Author: {wheel.author}')
            print(f'License: {wheel.license}')
            print(f'Requires Python: {wheel.requires_python}')
            print(f'Dependencies: {wheel.requires_dist}')
        else:
            print('No wheel files found')
        "

    - name: Inspect source distribution metadata
      run: |
        python -c "
        import pkginfo
        import glob
        
        sdist_files = glob.glob('dist/*.tar.gz')
        if sdist_files:
            sdist = pkginfo.SDist(sdist_files[0])
            print(f'Source package name: {sdist.name}')
            print(f'Source version: {sdist.version}')
            print(f'Source summary: {sdist.summary}')
        else:
            print('No source distribution files found')
        "

    - name: Check package contents
      run: |
        python -c "
        import zipfile
        import glob
        
        wheel_files = glob.glob('dist/*.whl')
        if wheel_files:
            with zipfile.ZipFile(wheel_files[0], 'r') as wheel:
                files = wheel.namelist()
                print('Wheel contents:')
                for file in sorted(files):
                    print(f'  {file}')
                
                # Check for required files
                required_files = [
                    'tavily_register/__init__.py',
                    'tavily_register/main.py',
                    'tavily_register-0.1.0.dist-info/METADATA'
                ]
                
                for req_file in required_files:
                    if any(req_file in f for f in files):
                        print(f'✓ Found required file: {req_file}')
                    else:
                        print(f'✗ Missing required file: {req_file}')
        "

  # Test in isolated environment
  test-isolated:
    name: Test in Isolated Environment
    needs: build-package
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-distributions
        path: dist/

    - name: Create isolated environment
      run: |
        python -m venv isolated_env
        source isolated_env/bin/activate
        pip install --upgrade pip

    - name: Install package in isolated environment
      run: |
        source isolated_env/bin/activate
        pip install dist/*.whl

    - name: Test in isolated environment
      run: |
        source isolated_env/bin/activate
        
        # Test CLI
        tavily-register --help
        
        # Test imports
        python -c "
        import sys
        print('Python path:', sys.path)
        
        import tavily_register
        print('Package location:', tavily_register.__file__)
        
        from tavily_register.main import main
        print('Main function imported successfully')
        
        from tavily_register.config.settings import get_config
        config = get_config()
        print('Configuration loaded successfully')
        "

    - name: Test dependencies in isolated environment
      run: |
        source isolated_env/bin/activate
        
        # Check that all dependencies are properly installed
        python -c "
        import pkg_resources
        
        # Get installed packages
        installed = [d.project_name for d in pkg_resources.working_set]
        print('Installed packages:', sorted(installed))
        
        # Check required dependencies
        required = ['playwright', 'requests', 'beautifulsoup4', 'lxml', 'python-dotenv']
        for dep in required:
            if dep in installed:
                print(f'✓ {dep} is installed')
            else:
                print(f'✗ {dep} is missing')
        "

  # Summary
  distribution-summary:
    name: Distribution Test Summary
    runs-on: ubuntu-latest
    needs: [build-package, test-installation, test-metadata, test-isolated]
    if: always()
    
    steps:
    - name: Display summary
      run: |
        echo "## Distribution Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Package Build | ${{ needs.build-package.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Installation Tests | ${{ needs.test-installation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Metadata Tests | ${{ needs.test-metadata.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Isolated Environment | ${{ needs.test-isolated.result }} |" >> $GITHUB_STEP_SUMMARY
